# -*- coding: utf-8 -*-
"""script_simulation_SQL_db_done/pending.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WBpDU8HMAmcRNXe8ZPKcoLJf818F9Otj
"""

import sqlite3
from datetime import datetime

"""creation table"""

def create_table():
    conn = sqlite3.connect("project_db.db")
    cursor = conn.cursor()
    cursor.execute("CREATE TABLE If NOT EXISTS tasks (id INTEGER PRIMARY KEY, name TEXT NOT NULL, command TEXT NOT NULL, status TEXT NOT NULL)")
    conn.commit()
    conn.close()
    print("Table created successfully")

"""add tasks"""

def add_status_tasks():
  conn = sqlite3.connect("project_db.db")
  cursor = conn.cursor()
  while True:
    proccess = input("please write End for exit: ")
    if proccess.title() == "End":
      break
    name = str(input("Enter task name: "))
    command = str(input("Enter command: "))
    status = str(input("Enter pending OR Done: "))
    if name and command and status:
      cursor.execute("INSERT INTO tasks (name, command, status) VALUES (?, ?, ?)",(name , command , status))
      print("______________________________________________________")
      print("Task added successfully")
      print("______________________________________________________")
    else:
      print("______________________________________________________")
      print("Invalid input. Please enter value.")
      print("______________________________________________________")
      break
  conn.commit()
  conn.close()

"""show and delete tasks"""

def show_del_tasks():
  conn = sqlite3.connect("project_db.db")
  cursor = conn.cursor()
  delete = input("Enter delete task OR NO: ")
  cursor.execute("DELETE FROM tasks WHERE name = ?",(delete,))


  cursor.execute("SELECT * FROM tasks")
  rows = cursor.fetchall()       #   it is return all of data from curser due to storage for select to rows
  for row in rows:
      print(row)
  print("______________________________________________________")
  print("______________________________________________________")
  print("now we will show pending task")
  print("______________________________________________________")
  print("______________________________________________________")
  cursor.execute("SELECT * FROM tasks WHERE status = 'pending'")
  pen = cursor.fetchall()
  for i in pen:
    print(i)
  conn.commit()
  conn.close()
  print("______________________________________________________")

  print(f"the length : {len(rows)}")

"""simulation"""

def simulation():
  conn = sqlite3.connect("project_db.db")
  cursor = conn.cursor()
  cursor.execute("SELECT id, name, command FROM tasks WHERE status = 'pending'")
  pending_tasks = cursor.fetchall()
  if not pending_tasks:
    print("NO PENDING TASKS")
  for row in pending_tasks:
      print(row)
  print(f"Start work : {len(pending_tasks)} : Pending")

  for id,name , command in pending_tasks:
    print(f"all tasks completed : {id} {name} {command}")
    cursor.execute("UPDATE tasks SET status = 'Done' WHERE id = ?",(id,))


    time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(time)
    with open("log_done.txt","a") as f:
      f.write(str(f" //  name : {name} command : {command} time/date : {time} // "))

  conn.commit()

  conn.close()
  print("______________________________________________________")

  print("congratulation all tasks done")
  print("______________________________________________________")





try:
  create_table()
  add_status_tasks()
  show_del_tasks()
  simulation()
  show_del_tasks()
except Exception as e:
  print(e)

